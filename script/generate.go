package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"regexp"
	"strings"
)

//go:generate go run generate.go

// https://github.com/microsoft/vscode/blob/main/extensions/theme-seti/icons/vs-seti-icon-theme.json
// https://github.com/jesseweed/seti-ui/blob/master/styles/components/icons/mapping.less

const outPath = "../icons/nerdicons/icons.go"

const url = "https://raw.githubusercontent.com/ryanoasis/nerd-fonts/master/css/nerd-fonts-generated.css"

// FetchCss downloads the file from the given url and returns the content as a string
func FetchCss(url string) (string, error) {
	resp, err := http.Get(url)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	// read the body into a string
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}

	return string(body), nil
}

// ParseCss parses the css file and returns a map of the icon names and their unicode values
func ParseCss(css string) map[string]string {
	icons := make(map[string]string)
	re := regexp.MustCompile(`(?ms)([a-zA-Z0-9-_]+):before {\n  content: "(\\[a-zA-z0-9]+)";`)
	matches := re.FindAllStringSubmatch(css, -1)
	if len(matches) == 0 {
		return icons
	}
	for _, match := range matches {
		match[2] = strings.Replace(match[2], `\`, `\u`, 1)
		icons[match[1]] = match[2]
	}
	return icons
}

func generateIconMap() {
	css, err := FetchCss(url)
	if err != nil {
		panic(err)
	}
	icons := ParseCss(css)
	var buf bytes.Buffer
	f := &buf
	fmt.Fprint(f, "// Code generated by script/generate.go. DO NOT EDIT.\n\n")
	fmt.Fprint(f, "package nerdicons\n\n")
	fmt.Fprint(f, "var Icons = map[string]string{\n")
	for k, v := range icons {
		fmt.Fprintf(f, "\t\"%s\": \"%s\",\n", k, v)
	}
	fmt.Fprint(f, "}\n\n")
	os.WriteFile(outPath, buf.Bytes(), 0644)
}

func main() {
	generateIconMap()
}
