Todo:
    Clicks in dialog stopped working
    Make UI components accept interfaces, particularly important for Entry

    When reading a directory, do not return on first error, but do something with the errors
    Nav - pause pre-walkers?

    Breadcrumb - need to handle clicks leaf -> root. There is a bug that misallocates clicks when the breadcrump is truncated
        Mostly fixed - add tests
    Breadcrumb - still an issue reading clicks when truncated, with a long path, and clicking second to last dir
    Breadcrumb - convert path to editable text box for navigation

    Preview - toggle preview pane visibility, particularly if the window is very narrow
    Preview - could preview directories
    Preview - Use this space for notifications when they arise?
    Preview - Create a monokai theme for glamour markdown rendering that looks like chroma rendering
    Preview - Change behavior based on type of drive? https://stackoverflow.com/questions/62731962/get-list-of-fixed-drives 
    Preview - Because secondary reads on a file are immediate if cached but the read time is updated Because we check modtime, the LRU 
        is affected by "uses" that could merely be times when the file is navigated over.

    FS operations - mkdir/mkfile/delete/etc. 
    FS operations - Dialog to show progress. I could show progress in the preview pane instead of the preview
    FS operations - download file
    FS operations - extract archive
    FS operations - show dialog if file/directory already exists (skip, replace, checkmark for do this for all)

    List - add sort methods for each column
    List - click column header to sort (add arrow icon and reverse on second click)
    List - freeze up/down list on navs and show spinner if taking more than 100 milliseconds
        Message to signal start of changing directory
    List - Multi-select filesystem objects
    List - Emit msgs on selection changes
        If multi-selecting, what to do with preview? Show preview for cursor or none?
    List - Show "This folder is empty." on empty folder. Once 
    List - ctrl+click for multi select
    List - space for multi select
    
    Icons - clean up
    Icons - keep all directory icons the same color

    Help - shift full help from wide to long based on terminal width and make it scrollable

    ButtonBar - Add a toggle hidden button - how to track this in history? It's a reload, so just don't record it in history

    All buttons - activate or deactivate based on selection/"clipboard" state 

    Infobar - need to track state of messages. If a new message comes in before the last one is cleared, clear the old message for a moment and add the new message
        make sure the old clear duration is ignored when it comes 

    Should I put all keys in one model or handle different key messages based on domain?
        The issue is navigation key presses could go on the nav buttons, file list, or global
    Put long error messages in a pop-up box at bottom and shorten other views. Can freeze list?
    Pull navigation state out of UI
    Only change working directory on exit - this makes sense if not execing commands
    Clean up theme/icon configuration and globals
        Icon sets and themes should be enums
    Return early if starting directory DNE or not reachable
    Live toggle-able themes

    What are the possible states?
    Right panel
        Hidden
        Loading file preview
        Previewing file
        Dialog
        Showing progress bars w/ cancel button?
        Previewing directory?
    Center panel
        Loading directory
        Showing directory
        Showing empty directory
    Left panel
        Hidden
        Quick access

    Fs operation states:
        Confirm
            Ask for confirmation with dialog
            Freeze list, buttons, navigation keys
        Confirmed (during opertion)
            Dialog: show "Deleting..." spinner with dialog cancel button, pass a callback fn (context CancelFunc) that will be called if cancelled               
        Completed
            Refresh directory
                Show spinner if longer than 100ms
            Unfreeze list, buttons, navigation keys

    Caching filesystem reads
    Big features:
        Implement search (fzf?)
        Integrate with zoxide?
        Bookmarks
            Add bookmark functionality
            Toggle bookmark pane visibility
    Resizes on Windows
        procGetLargestConsoleWindowSize = k32.NewProc("GetLargestConsoleWindowSize") https://github.com/gdamore/tcell/blob/47ec3a77754f83e84481fc9cdd0bc2072cd292ba/console_win.go
        Polling using termenv - https://github.com/charmbracelet/bubbletea/discussions/661 
    Mutliple tabs with shared "clipboard"

    Ruled out for now:
        List - Use nerd-font icons based on file type - default to emojis.
            gorunewidth does not calculate many glyph's widths accurately which disruptes accurate ui rendering 

Finished:
    Sort directories and files separately
    Truncate breadcrumb if it is too wide
    Fix infinite scroll on file previews
    Read file previews in separate go routine to prevent ui locking
    List navigation - fix viewport scroll on directories with many entries
    Remove change and access time, which aren't informative -- especially access time when we are previewing
    Preview - MIME type is not very informative
    Preview - add config option for read delay. Default to 250 milliseconds?
    Preview - could show file name in cursor style or not at all. Chose not at all
    Preview - could show line numbers but this might reduce the info shown too much
    List navigation - On nav up, set cursor to directory just in 
    Breadcrumb - update path after directory is actually changed
    Make entry info ok for starting on empty directory
    History is saving the prior state during the first nav.Go, which is actually going to the start position. 
        This is a bug but the only consequence is that you can hit the back button once more than you should be able to
        Perhaps only record the nav when moving away from starting position
        Fixed by starting with a reload (which is slightly hacky. See comment in App.Init())
    Move ui model out of main package
    Toggle activattion on Back/Fwd/Up buttons
    Breadcrumb - show root directory
    List - getting 1 frame of empty dir before being updated with entries
    List - cursor can be set more proactively
        Should history only track the cursor, not selected? Decided to track cursor and paths visited separately
        Should chdirs one up and one down return the prior state of that dir despite not truly being a back or fwd? No.
    List - double click should only be relevant if clicked on the same item
    Separate button sets into separate components and compose them in App
    Configurable double-click interval for people with disabilities
    Preview - UI hangs on "Loading preview..." for empty files 
    Preview - render markdown preview with glamour
    Preview - check mimetype, read the first X lines or bytes into memory. Track the read position
    Preview - move file reading out of ui
    Separate the preview cache (mapstruct) and read/write/prune operations from the fetching  
    Preview - Don't try to read files that are of certain file extensions and/or over a certain size
    Nav - if jumping up in the tree, should the cursor be set to the grand-parent of the origin directory?
        Have to manage filepath.join on windows
    Preview - could delay showing the Preview Loading filler for a tenth of a second for smoother viewing?
    Preview - Track whether a file was read or not, if it was, set delay to zero for following read
    List - do not circle back when reaching top or bottom
    Preview - if permission denied or other error, do not show loading directory message
    Preview - Hanging on loading directory on ones that cannot be accessed.
    Preview - show "Select a file to preview." on empty folder
    Implement real navigation history
    Read aheads in filetree
    Clean filepaths that are read from cli/config file
    FS operations - Dialog to confirm Changes
    Infobar - clear "Access denied" message on a dir change 
    Infobar - update storage used every x duration

